/* Creates intermediary file tmptaxmap2
/*
/* Args: NONE
/*
/* Input:
/*    taxbound
/*    tmptaxmap1
/*    annostd.lut - a table telling what font, fontsize, bold, italic to use for each level and scale
/*
/* Output:
/*    tmptaxmap2   
/*
&WATCH 04-tmptaxmap2.wat &COMMANDS

&do name &list taxbound, tmptaxmap1
  &if ^ [exists %name% -cover] &then &do 
    &type Missing %name%
    &return ; &return
  &end
&end

&do name &list tmptaxmap2, tbigds, igds
  &if [exists %name% -cover] &then &do
    kill %name% all
  &end
&end

&type -- 1. Copy the coverage we will modify
copy tmptaxmap1 tmptaxmap2

&type -- 2. Add tmptaxmap2 annotation attributes
/* this section was moved from 01-MakeTaxbound.aml

/* Create anno.igds -- 

addtext tmptaxmap2 igds

additem tmptaxmap2.tatigds tmptaxmap2.tatigds STDSIZE,4,5,B 
additem tmptaxmap2.tatigds tmptaxmap2.tatigds maplevel 3 3 i 
additem tmptaxmap2.tatigds tmptaxmap2.tatigds mapsize 8 8 n 2 
additem tmptaxmap2.tatigds tmptaxmap2.tatigds mapscale 5 5 i
additem tmptaxmap2.tatigds tmptaxmap2.tatigds mapnumber 20 20 c 

&type -- 3. Build point coverage for annotation and overlay it with map boundary using generate and intersect 

/* This creates a file "genanno.txt" in the project folder that contains only the OID,X,Y
&data arc info 
arc
SEL TMPTAXMAP2.TATIGDS
ALTER IGDS-ID 
,10,,,,,,,,,,,,,
CALC IGDS-ID = IGDS# 
OUTPUT ../GENANNO.TXT INIT
CALC $COMMA-SWITCH = -1 
DIS IGDS-ID,X,Y PRINT 
DIS 'end' print 
q stop
&end 

IDEDIT tmptaxmap2 ANNO.IGDS

/* "Generate" is an external command like ARCEDIT
GENERATE IGDS
INPUT GENANNO.TXT 
POINTS 
Q
/* The points are loaded into some limbo-land tablespace in coverage igds by "generate"
/* and then turned into an actual point featureclass by this command
build IGDS point

/* This effectively copies the attributes from the taxbound points to the igds points and put them in tbigds
/*   intersect in_cover intersect_cover out_cover POLY|LINE|POINT tolerance JOIN|NOJOIN
INTERSECT igds taxbound tbigds POINT 

&type -- 4. Copy the important attributes from TBIGDS to TMPTAXMAP2 annotation
/* We do this by setting up a "RELATE" between the TBIGDS point attributes and the TMPTAXMAP2 annotation attributes

&DATA ARC INFO
ARC
SEL TBIGDS.PAT 
ALTER IGDS-ID
,10,,,,,,,,,,,
SORT IGDS-ID 
SEL TMPTAXMAP2.TATIGDS 
RELATE TBIGDS.PAT BY IGDS-ID WITH ORDER
CALC $NM = 1 
MOVE $1MAPNUMBER TO MAPNUMBER 
MOVE $1PAGENAME TO PAGENAME
MOVE $1AUTODATE TO AUTODATE
MOVE $1AUTOMETHOD TO AUTOMETHOD
MOVE $1AUTOWHO TO AUTOWHO
CALC MAPSCALE = $1MAPSCALE 
Q STOP
&END

&type -- 5. Calc feature types to standard

/* I don't know that this does anything meaningful at all. $LEVEL is a binary field and MAPLEVEL is integer
/* so I seem to end up with a field that has no meaningful information in it
/*&DATA ARC INFO
/*ARC
/*SEL TMPTAXMAP2.TATIGDS
/*MOVE LEVEL TO MAPLEVEL
/*Q STOP
/*&end

arcedit
ec tmptaxmap2 
ef anno.igds

&type -- Populate maplevel and mapsize as defaults
sel all
/*calc maplevel = $LEVEL /* this throws an error so I do it in and info session instead, above
calc mapsize = $SIZE /* this throws an error in the info session, so I do it here, instead. Sigh.

/* 56 = Zone annotation (vegetation per ORS 390.770)
/* I think Dean has this here because they use it for county boundary?
/* I don't think we want to touch it.
/* sel $LEVEL = 56
/* &if [show number select] > 0 &then &do
/*   /* 58 = Adjacent
/*   calc $LEVEL = 58 
/* &end

/* 20 = Station
sel $LEVEL = 20 
res $TEXT CN 'P.' OR $TEXT CN '+' OR $TEXT CN 'PC' OR $TEXT CN 'EQUATION' or $TEXT CN 'STA. ' or $TEXT CN 'PT' 
/*res $TEXT CN 'P.T.' OR $TEXT CN 'P.C.' OR $TEXT CN 'P.R.C.' OR $TEXT CN 'PT' OR $TEXT CN '+'  OR $TEXT CN 'ST ' OR $TEXT CN 'S.T' or $TEXT CN 'STATION'
&if [show number select] > 0 &THEN &DO 
   NSEL
   res $LEVEL = 20 
   &IF [SHOW NUMBER SELECT] > 0 &THEN &DO 
    /* 36 = Reference Notes
     CALC $LEVEL = 36	
   &END 
&END  

/* All unassigned annotation is going into ref notes regardless of size 
/* Do this by selecting everything we're interested in,
/* then invert the selection, leaving random unassigned things selected
/* Then mark all those unselected things as LEVEL=36

sel $level = 10 or $level = 13 or $level = 16 or $level = 19 or $level = 20 or $level = 23 or $level = 25 or $level = 27 or $level = 34 or $level = 36 or $level = 37 
asel $level = 38 or $level = 39 or $level = 41 or $level = 42  or $level = 43 or $level = 45 or $level = 46 or $level = 47 or $level = 54 or $level = 58 or $level = 62
res $level < 1000 
nsel 
&if [show number select] > 0 &then &do
    /* 36 = Annotation class for "Reference Notes"
    calc $LEVEL = 36
&end 

sel all
/* calc $SIZE = 0
calc $SYMBOL = $LEVEL 
calc LEVEL = $LEVEL

/* 34 = bearing/distance
/* 41 = subdivision name
sel $LEVEL = 34 or $level = 41
&if [show number select] > 0 &then &do
  calc $SIZE = $SIZE * 1.4                                /* Dean Added Jan 25 2018 
&end

save 
q

&type -- 7. Calc new standard sizes as set by Tom from Christi --- Dean loaded to $SIZE - Jan 2018 

/* annostd.lut is a table containing
/* LEVEL        annotation level, eg 10 for Public Road Name
/* SIZE100      float, points, like 14.0
/* SIZE200
/* SIZE400
/* SIZE2000
/* STDFONT      font name, eg Arial
/* STDBOLD      0|1
/* STDITALIC    0|1


&S X = [DELETE ANNOSTD.LUT -INFO]
copyinfo C:\GeoModel\Clatsop\AnnoGenCov\info!ARC!ANNOSTD.LUT  ANNOSTD.LUT 

&DATA ARC INFO
ARC
CALC $NM = 1
SEL TMPTAXMAP2.TATIGDS
RELATE ANNOSTD.LUT BY LEVEL WITH ORDER 

ASEL
RES MAPSCALE = 100
CALC STDSIZE = $1SIZE100
ASEL
RES MAPSCALE = 200 
CALC STDSIZE = $1SIZE200
ASEL
RES MAPSCALE = 400 
CALC STDSIZE = $1SIZE400
ASEL
RES MAPSCALE = 2000 
CALC STDSIZE = $1SIZE2000

ASEL
RES MAPSCALE = 100 AND LEVEL = 10 AND MAPSIZE <> 20
CALC STDSIZE = $1SIZE100 * MAPSIZE / 20 
ASEL
RES MAPSCALE = 200 AND LEVEL = 10 AND MAPSIZE <> 28
CALC STDSIZE = $1SIZE200  * MAPSIZE / 28 
ASEL
RES MAPSCALE = 400 AND LEVEL = 10 AND MAPSIZE <> 40
CALC STDSIZE = $1SIZE400  * MAPSIZE / 40 
ASEL
RES MAPSCALE = 2000 AND LEVEL = 10 AND MAPSIZE <> 200
CALC STDSIZE = $1SIZE2000  * MAPSIZE / 200 

ASEL
RES MAPSCALE = 100 AND LEVEL = 41 AND MAPSIZE <> 24
CALC STDSIZE = $1SIZE100  * MAPSIZE / 24 
ASEL
RES MAPSCALE = 200 AND LEVEL = 41 AND MAPSIZE <> 48
CALC STDSIZE = $1SIZE200 * MAPSIZE / 48 
ASEL
RES MAPSCALE = 400 AND LEVEL = 41 AND MAPSIZE <> 96
CALC STDSIZE = $1SIZE400 * MAPSIZE / 96 
ASEL
RES MAPSCALE = 2000 AND LEVEL = 41 AND MAPSIZE <> 480
CALC STDSIZE = $1SIZE2000 * MAPSIZE / 480 

ASEL
RES MAPSCALE = 100 AND LEVEL = 54 AND ( MAPSIZE < 49 or MAPSIZE > 51 ) 
CALC STDSIZE = $1SIZE100  * MAPSIZE / 50
ASEL
RES MAPSCALE = 200 AND LEVEL = 54 AND ( MAPSIZE < 99 or MAPSIZE > 101 ) 
CALC STDSIZE= $1SIZE200 * MAPSIZE / 100 
ASEL
RES MAPSCALE = 400 AND LEVEL = 54 AND ( MAPSIZE < 199 or MAPSIZE > 201 ) 
CALC STDSIZE = $1SIZE400 * MAPSIZE / 200
ASEL
RES MAPSCALE = 2000 AND LEVEL = 54 AND ( MAPSIZE < 999 or MAPSIZE > 1001 ) 
CALC STDSIZE = $1SIZE2000 * MAPSIZE / 1000
Q STOP
&END 

&type -- Copy recalculated STDSIZE back to $SIZE

arcedit
ec tmptaxmap2
ef anno.igds
sel all
calc $size = stdsize 
save
q

/* &type -- Kill temp files
kill tbigds
kill igds

&type -- That's all! --
&RETURN
